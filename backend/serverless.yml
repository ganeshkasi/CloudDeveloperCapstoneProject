service:
  name: receipt-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    RECEIPTS_TABLE: Receipts-${self:provider.stage}
    INDEX_NAME: ReceiptIdIndex
    RECEIPTS_S3_BUCKET: serverless-receipts-bucket-jmanzano-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    RECEIPT_TOPIC_ARN:
      Fn::Join:
        - ':'
        - - arn:aws:sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - ${self:custom.topicName}

custom:
  serverless-offline:
    port: 3003

  topicName: receiptsTopic-${self:provider.stage}

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: RECEIPT API
        description: Serverless application for RECEIPT
    models:
      - name: CreateReceiptRequest
        contentType: application/json
        schema: ${file(models/create-receipt-request.json)}
      - name: UpdateReceiptRequest
        contentType: application/json
        schema: ${file(models/update-receipt-request.json)}


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
      - Effect: "Allow"
        Resource: "*"
        Action:
          - "sns:*"
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
  # RECEIPT: Configure this function
  GetReceipts:
    handler: src/lambda/http/getReceipts.handler
    events:
      - http:
          method: get
          path: receipts
          cors: true
          authorizer: Auth

    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPTS_TABLE}/index/${self:provider.environment.INDEX_NAME}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPTS_TABLE}         
    - Effect: Allow
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

  # RECEIPT: Configure this function
  CreateReceipt:
    handler: src/lambda/http/createReceipt.handler
    events:
      - http:
          method: post
          path: receipts
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new receipt
            description: Create a new tddo
            requestModels:
              'application/json': CreateReceiptRequest
    iamRoleStatements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPTS_TABLE}
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPTS_TABLE}/index/${self:provider.environment.INDEX_NAME}
        - Effect: Allow
          Action:
            - "xray:PutTraceSegments"
            - "xray:PutTelemetryRecords"
          Resource:
            - "*"  

  UpdateReceipt:
    handler: src/lambda/http/updateReceipt.handler
    events:
      - http:
          method: patch
          path: receipts/{receiptId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: update a receipt
            description: update a tddo
            requestModels:
              'application/json': UpdateReceiptRequest
    iamRoleStatements:
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
            - dynamodb:GetItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPTS_TABLE}
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
            - dynamodb:GetItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPTS_TABLE}/index/${self:provider.environment.INDEX_NAME}
        - Effect: Allow
          Action:
            - "xray:PutTraceSegments"
            - "xray:PutTelemetryRecords"
          Resource:
            - "*"  
  # RECEIPT: Configure this function
  DeleteReceipt:
    handler: src/lambda/http/deleteReceipt.handler
    events:
      - http:
          method: delete
          path: receipts/{receiptId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPTS_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"  
  # RECEIPT: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: receipts/{receiptId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: "arn:aws:s3:::${self:provider.environment.RECEIPTS_S3_BUCKET}/*"
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPTS_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"  

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

      # DynamoDB
    ReceiptTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: receiptId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: receiptId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.RECEIPTS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.RECEIPTS_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref receiptsTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.RECEIPTS_S3_BUCKET}/*'
        Bucket: !Ref S3Bucket

    receiptsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: receipt bucket topic
        TopicName: ${self:custom.topicName}

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref receiptsTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.RECEIPTS_S3_BUCKET}
        Topics:
          - !Ref receiptsTopic